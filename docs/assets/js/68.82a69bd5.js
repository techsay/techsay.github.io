(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{381:function(t,e,a){"use strict";a.r(e);var l=a(4),_=Object(l.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),e("h3",{attrs:{id:"算术运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[t._v("#")]),t._v(" 算术运算符")]),t._v(" "),e("p",[t._v("下表显示了 C 语言支持的所有算术运算符。假设变量 "),e("strong",[t._v("A")]),t._v(" 的值为 10，变量 "),e("strong",[t._v("B")]),t._v(" 的值为 20，则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("+")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("把两个操作数相加")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A + B 将得到 30")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从第一个操作数中减去第二个操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A - B 将得到 -10")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("*")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("把两个操作数相乘")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A * B 将得到 200")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("/")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("分子除以分母")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("B / A 将得到 2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("%")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("取模运算符，整除后的余数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("B % A 将得到 0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("++")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("自增运算符，整数值增加 1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A++ 将得到 11")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("--")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("自减运算符，整数值减少 1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A-- 将得到 9")])])])]),t._v(" "),e("h3",{attrs:{id:"关系运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[t._v("#")]),t._v(" 关系运算符")]),t._v(" "),e("p",[t._v("下表显示了 C 语言支持的所有关系运算符。假设变量 "),e("strong",[t._v("A")]),t._v(" 的值为 10，变量 "),e("strong",[t._v("B")]),t._v(" 的值为 20，则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("==")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查两个操作数的值是否相等，如果相等则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A == B) 为假。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("!=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查两个操作数的值是否相等，如果不相等则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A != B) 为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v(">")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查左操作数的值是否大于右操作数的值，如果是则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A > B) 为假。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("<")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查左操作数的值是否小于右操作数的值，如果是则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A < B) 为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v(">=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A >= B) 为假。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("<=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A <= B) 为真。")])])])]),t._v(" "),e("h3",{attrs:{id:"逻辑运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),e("p",[t._v("下表显示了 C 语言支持的所有关系逻辑运算符。假设变量 "),e("strong",[t._v("A")]),t._v(" 的值为 1，变量 "),e("strong",[t._v("B")]),t._v(" 的值为 0，则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("&&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("称为逻辑与运算符。如果两个操作数都非零，则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A && B) 为假。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("||")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A || B) 为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("!")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("!(A && B) 为真。")])])])]),t._v(" "),e("h3",{attrs:{id:"位运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),e("p",[t._v("位运算符作用于位，并逐位执行操作。&、 | 和 ^ 的真值表如下所示：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("p")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("q")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("p & q")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("p | q")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("p ^ q")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")])])])]),t._v(" "),e("p",[t._v("假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：")]),t._v(" "),e("p",[t._v("A = 0011 1100")]),t._v(" "),e("p",[t._v("B = 0000 1101")]),t._v(" "),e("p",[t._v("-----------------")]),t._v(" "),e("p",[t._v("A&B = 0000 1100")]),t._v(" "),e("p",[t._v("A|B = 0011 1101")]),t._v(" "),e("p",[t._v("A^B = 0011 0001")]),t._v(" "),e("p",[t._v("~A = 1100 0011")]),t._v(" "),e("p",[t._v("下表显示了 C 语言支持的位运算符。假设变量 "),e("strong",[t._v("A")]),t._v(" 的值为 60，变量 "),e("strong",[t._v("B")]),t._v(" 的值为 13，则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v('按位与操作，按二进制位进行"与"运算。运算规则：'),e("code",[t._v("0&0=0; 0&1=0; 1&0=0; 1&1=1;")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A & B) 将得到 12，即为 0000 1100")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v('按位或运算符，按二进制位进行"或"运算。运算规则：'),e("code",[t._v("0|0=0; 0|1=1; 1|0=1; 1|1=1;")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A | B) 将得到 61，即为 0011 1101")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v('异或运算符，按二进制位进行"异或"运算。运算规则：'),e("code",[t._v("0^0=0; 0^1=1; 1^0=1; 1^1=0;")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A ^ B) 将得到 49，即为 0011 0001")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("~")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v('取反运算符，按二进制位进行"取反"运算。运算规则：'),e("code",[t._v("~1=-2; ~0=-1;")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("<<")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A << 2 将得到 240，即为 1111 0000")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v(">>")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A >> 2 将得到 15，即为 0000 1111")])])])]),t._v(" "),e("h3",{attrs:{id:"赋值运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[t._v("#")]),t._v(" 赋值运算符")]),t._v(" "),e("p",[t._v("下表列出了 C 语言支持的赋值运算符：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("简单的赋值运算符，把右边操作数的值赋给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C = A + B 将把 A + B 的值赋给 C")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("+=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C += A 相当于 C = C + A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("-=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C -= A 相当于 C = C - A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("*=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C *= A 相当于 C = C * A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("/=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C /= A 相当于 C = C / A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("%=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("求模且赋值运算符，求两个操作数的模赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C %= A 相当于 C = C % A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("<<=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("左移且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C <<= 2 等同于 C = C << 2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v(">>=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("右移且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C >>= 2 等同于 C = C >> 2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("&=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("按位与且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C &= 2 等同于 C = C & 2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("^=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("按位异或且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C ^= 2 等同于 C = C ^ 2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("|=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("按位或且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C |= 2 等同于 C = C | 2")])])])]),t._v(" "),e("h3",{attrs:{id:"杂项运算符-↦-sizeof-三元"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#杂项运算符-↦-sizeof-三元"}},[t._v("#")]),t._v(" 杂项运算符 ↦ sizeof & 三元")]),t._v(" "),e("p",[t._v("下表列出了 C 语言支持的其他一些重要的运算符，包括 "),e("strong",[t._v("sizeof")]),t._v(" 和 "),e("strong",[t._v("? :")]),t._v("。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("sizeof()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回变量的大小。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("sizeof(a) 将返回 4，其中 a 是整数。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回变量的地址。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("&a; 将给出变量的实际地址。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("*")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("指向一个变量。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("*a; 将指向一个变量。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("? :")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("条件表达式")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("如果条件为真 ? 则值为 X : 否则值为 Y")])])])]),t._v(" "),e("h3",{attrs:{id:"c-中的运算符优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-中的运算符优先级"}},[t._v("#")]),t._v(" C 中的运算符优先级")]),t._v(" "),e("p",[t._v("运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。")]),t._v(" "),e("p",[t._v("例如 x = 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。")]),t._v(" "),e("p",[t._v("下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("类别")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("结合性")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("后缀")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("() [] -> . ++ - -")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("一元")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("+ - ! ~ ++ - - (type)* & sizeof")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("乘除")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("* / %")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("加减")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("+ -")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("移位")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("<< >>")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("关系")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("< <= > >=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("相等")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("== !=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("位与 AND")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("位异或 XOR")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("位或 OR")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑与 AND")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("&&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑或 OR")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("||")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("条件")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("?:")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("赋值")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("= += -= *= /= %=>>= <<= &= ^= |=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("逗号")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v(",")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])])])]),t._v(" "),e("h2",{attrs:{id:"转义符号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转义符号"}},[t._v("#")]),t._v(" 转义符号")]),t._v(" "),e("p",[t._v("在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\\n）或制表符（\\t）等。")]),t._v(" "),e("p",[t._v("下表列出了一些这样的转义序列码：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("转义序列")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("\\ 字符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("'")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("' 字符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v('"')]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v('" 字符')])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("?")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("? 字符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\a")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("警报铃声")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\b")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("退格键")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\f")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("换页符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\n")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("换行符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\r")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("回车")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\t")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("水平制表符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\v")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("垂直制表符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\ooo")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一到三位的八进制数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\xhh . . .")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一个或多个数字的十六进制数")])])])]),t._v(" "),e("p",[t._v("测试：")]),t._v(" "),e("div",{staticClass:"language-scss extra-class"},[e("pre",{pre:!0,attrs:{class:"language-scss"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello\\tWorld\\n\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果")]),t._v("\nHello   World\n")])])]),e("h2",{attrs:{id:"存储类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储类"}},[t._v("#")]),t._v(" 存储类")]),t._v(" "),e("h3",{attrs:{id:"auto-存储类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#auto-存储类"}},[t._v("#")]),t._v(" auto 存储类")]),t._v(" "),e("p",[e("strong",[t._v("auto")]),t._v(" 存储类是所有局部变量默认的存储类。")]),t._v(" "),e("div",{staticClass:"language-scss extra-class"},[e("pre",{pre:!0,attrs:{class:"language-scss"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   int mount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   auto int month"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数内定义的变量默认就是局部变量auto")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("上面的实例定义了两个带有相同存储类的变量，auto 只能用在函数内，即 auto 只能修饰局部变量。")]),t._v(" "),e("h3",{attrs:{id:"register-存储类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#register-存储类"}},[t._v("#")]),t._v(" register 存储类")]),t._v(" "),e("p",[e("strong",[t._v("register")]),t._v(" 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个字），且不能对它应用一元的 '&' 运算符（因为它没有内存位置）。")]),t._v(" "),e("div",{staticClass:"language-scss extra-class"},[e("pre",{pre:!0,attrs:{class:"language-scss"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   register int  miles"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 'register' 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。")]),t._v(" "),e("h3",{attrs:{id:"static-存储类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#static-存储类"}},[t._v("#")]),t._v(" static 存储类")]),t._v(" "),e("p",[e("strong",[t._v("static")]),t._v(" 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。")]),t._v(" "),e("p",[t._v("static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。")]),t._v(" "),e("p",[t._v("全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。")]),t._v(" "),e("p",[t._v("以下实例演示了 static 修饰全局变量和局部变量的应用：")]),t._v(" "),e("h3",{attrs:{id:"extern-存储类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extern-存储类"}},[t._v("#")]),t._v(" extern 存储类")]),t._v(" "),e("p",[e("strong",[t._v("extern")]),t._v(" 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 "),e("strong",[t._v("extern")]),t._v(" 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。")]),t._v(" "),e("p",[t._v("当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 "),e("em",[t._v("extern")]),t._v(" 来得到已定义的变量或函数的引用。可以这么理解，"),e("em",[t._v("extern")]),t._v(" 是用来在另一个文件中声明一个全局变量或函数。")]),t._v(" "),e("p",[t._v("extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：")]),t._v(" "),e("p",[e("strong",[t._v("第一个文件：main.c")])]),t._v(" "),e("h4",{attrs:{id:"实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),e("div",{staticClass:"language-scss extra-class"},[e("pre",{pre:!0,attrs:{class:"language-scss"}},[e("code",[t._v(" #include <stdio.h>  \n int count "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n extern void write_"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("extern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n \n int "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n \tcount = 5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n \twrite_"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("extern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("strong",[t._v("第二个文件：support.c")])]),t._v(" "),e("h4",{attrs:{id:"实-例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实-例"}},[t._v("#")]),t._v(" 实 例")]),t._v(" "),e("div",{staticClass:"language-scss extra-class"},[e("pre",{pre:!0,attrs:{class:"language-scss"}},[e("code",[t._v(" #include <stdio.h>  \n \n extern int count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n \n void write_"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("extern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n \t\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"count is %d\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("在这里，第二个文件中的 "),e("em",[t._v("extern")]),t._v(" 关键字用于声明已经在第一个文件 main.c 中定义的 "),e("em",[t._v("count")]),t._v("。现在 ，编译这两个文件，如下所示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" $ gcc main.c support.c\n")])])]),e("p",[t._v("这会产生 "),e("strong",[t._v("a.out")]),t._v(" 可执行程序，当程序被执行时，它会产生下列结果：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("count is 5\n")])])]),e("h2",{attrs:{id:"判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断"}},[t._v("#")]),t._v(" 判断")]),t._v(" "),e("p",[t._v("C 语言把任何"),e("strong",[t._v("非零")]),t._v("和"),e("strong",[t._v("非空")]),t._v("的值假定为 "),e("strong",[t._v("true")]),t._v("，把"),e("strong",[t._v("零")]),t._v("或 "),e("strong",[t._v("null")]),t._v(" 假定为 "),e("strong",[t._v("false")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"判断语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断语句"}},[t._v("#")]),t._v(" 判断语句")]),t._v(" "),e("p",[t._v("C 语言提供了以下类型的判断语句。点击链接查看每个语句的细节。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("语句")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-if.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("if 语句"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一个 "),e("strong",[t._v("if 语句")]),t._v(" 由一个布尔表达式后跟一个或多个语句组成。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-if-else.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("if...else 语句"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一个 "),e("strong",[t._v("if 语句")]),t._v(" 后可跟一个可选的 "),e("strong",[t._v("else 语句")]),t._v("，else 语句在布尔表达式为假时执行。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-nested-if.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("嵌套 if 语句"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("您可以在一个 "),e("strong",[t._v("if")]),t._v(" 或 "),e("strong",[t._v("else if")]),t._v(" 语句内使用另一个 "),e("strong",[t._v("if")]),t._v(" 或 "),e("strong",[t._v("else if")]),t._v(" 语句。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-switch.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("switch 语句"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一个 "),e("strong",[t._v("switch")]),t._v(" 语句允许测试一个变量等于多个值时的情况。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-nested-switch.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("嵌套 switch 语句"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("您可以在一个 "),e("strong",[t._v("switch")]),t._v(" 语句内使用另一个 "),e("strong",[t._v("switch")]),t._v(" 语句。")])])])]),t._v(" "),e("h3",{attrs:{id:"运算符-三元运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符-三元运算符"}},[t._v("#")]),t._v(" ? : 运算符(三元运算符)")]),t._v(" "),e("p",[t._v("我们已经在前面的章节中讲解了 "),e("strong",[t._v("条件运算符 ? :")]),t._v("，可以用来替代 "),e("strong",[t._v("if...else")]),t._v(" 语句。它的一般形式如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Exp1 ? Exp2 : Exp3;\n")])])]),e("h2",{attrs:{id:"循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),e("h3",{attrs:{id:"循环类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环类型"}},[t._v("#")]),t._v(" 循环类型")]),t._v(" "),e("p",[t._v("C 语言提供了以下几种循环类型。点击链接查看每个类型的细节。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("循环类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-while-loop.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("while 循环"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-for-loop.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("for 循环"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("多次执行一个语句序列，简化管理循环变量的代码。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-do-while-loop.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("do...while 循环"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("除了它是在循环主体结尾测试条件外，其他与 while 语句类似。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-nested-loops.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("嵌套循环"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("您可以在 while、for 或 do..while 循环内使用一个或多个循环。")])])])]),t._v(" "),e("h3",{attrs:{id:"循环控制语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环控制语句"}},[t._v("#")]),t._v(" 循环控制语句")]),t._v(" "),e("p",[t._v("循环控制语句改变你代码的执行顺序。通过它你可以实现代码的跳转。")]),t._v(" "),e("p",[t._v("C 提供了下列的循环控制语句。点击链接查看每个语句的细节。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("控制语句")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-break-statement.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("break 语句"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("终止"),e("strong",[t._v("循环")]),t._v("或 "),e("strong",[t._v("switch")]),t._v(" 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-continue-statement.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("continue 语句"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://www.runoob.com/cprogramming/c-goto-statement.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("goto 语句"),e("OutboundLink")],1)]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。")])])])]),t._v(" "),e("h3",{attrs:{id:"无限循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无限循环"}},[t._v("#")]),t._v(" 无限循环")]),t._v(" "),e("p",[t._v("如果条件永远不为假，则循环将变成无限循环。"),e("strong",[t._v("for")]),t._v(" 循环在传统意义上可用于实现无限循环。由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。")]),t._v(" "),e("h4",{attrs:{id:"实例-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例-2"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),e("div",{staticClass:"language-scss extra-class"},[e("pre",{pre:!0,attrs:{class:"language-scss"}},[e("code",[t._v("#include <stdio.h>\n \nint main "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"该循环会永远执行下去！\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   return 0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("当条件表达式不存在时，它被假设为真。您也可以设置一个初始值和增量表达式，但是一般情况下，C 程序员偏向于使用 for(;😉 结构来表示一个无")])])}),[],!1,null,null,null);e.default=_.exports}}]);